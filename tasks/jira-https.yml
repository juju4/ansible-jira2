---
## https://confluence.atlassian.com/adminjiraserver071/running-jira-applications-over-ssl-or-https-802593051.html
## http://docs.oracle.com/javase/1.5.0/docs/tooldocs/solaris/keytool.html

- name: Upload certificates files
  copy:
    src: "{{ item }}"
    dest: "{{ jira_installdir }}/conf/{{ item | basename }}"
    mode: '0400'
    backup: yes
  with_items: "{{ jira_https_files_to_upload }}"

- name: Create keystore
  command: >
    keytool -genkey -alias jira -keyalg RSA -keystore {{ jira_keystore }}
        -storepass {{ jira_keystore_pass }} -validity 360 -keysize 2048
  args:
    creates: "{{ jira_keystore }}"

- block:
    - name: Create CSR
      command: >
        keytool -certreq -keyalg RSA -alias jira -keystore {{ jira_keystore }}
            -storepass {{ jira_keystore_pass }} -file {{ jira_https_csr }}
            -dname {{ jira_https_dname }} -noprompt
      args:
        creates: "{{ jira_https_csr }}"

    - name: Check if have root certificate
      stat: path="{{ jira_https_rootcert }}"
      register: rootcert
    - name: Import root certificate
      command: >
        keytool -import -alias rootCA -keystore {{ jira_keystore }}
            -storepass {{ jira_keystore_pass }} -trustcacerts
            -file {{ jira_https_rootcert }}
      when: rootcert.stat.exists

    - name: Check if have signed certificate
      stat: path="{{ jira_https_crt }}"
      register: crt
    - name: Import signed certificate
      command: >
        keytool -import -alias jira -keystore {{ jira_keystore }}
            -storepass {{ jira_keystore_pass }}
            -file {{ jira_https_crt }}
      when: crt.stat.exists
  when: jira_https_files_to_upload != []

- block:
    - name: Generating self-signed certificate
      command: >
        keytool -selfcert -keyalg RSA -alias jira -keystore {{ jira_keystore }}
            -storepass {{ jira_keystore_pass }} -file {{ jira_https_csr }}
            -dname {{ jira_https_dname }} -noprompt
      args:
        creates: "{{ jira_https_csr }}"
  when: jira_https_files_to_upload == []

- name: Verify the certificate exists within the keystore
  shell: >
    set -o pipefail &&
    keytool -list -alias jira -keystore {{ jira_keystore }}
        -storepass {{ jira_keystore_pass }} | grep PrivateKeyEntry
  args:
    executable: /bin/bash
  changed_when: false
  register: keytoolcheck
- name: Debug | keytool output
  debug: var=keytoolcheck.stdout_lines

# - import_tasks: jira-https-server_xml1.yml
# no alternate as done by template of reverseproxy
